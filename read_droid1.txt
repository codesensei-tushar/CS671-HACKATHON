Here's a polished and professional version of your text for a `README.txt` file:

---

# üì∑ DroidCam Setup & Real-Time Person Detection (CS671-HACKATHON)

## üîß Setup Instructions

### 1. Save the Setup Script

Save the following script to your project directory:

```bash
~/workspace/hkn/CS671-HACKATHON/setup_droidcam.sh
```

### 2. Make It Executable

```bash
chmod +x ~/workspace/hkn/CS671-HACKATHON/setup_droidcam.sh
```

### 3. Run the Script

```bash
cd ~/workspace/hkn/CS671-HACKATHON
./setup_droidcam.sh
```

#### üìå Note:

* The script will **ask if Secure Boot is disabled**. Type `y` **only** if Secure Boot is actually disabled.

### ‚úÖ What This Script Does

* Installs:

  * DroidCam
  * `v4l2loopback-dc` kernel module
  * `libappindicator3-1` (for Ubuntu 21+)
  * `adb` (Android Debug Bridge)
* Sets up a Python environment (`flash`) with required packages.
* Verifies or downloads `yolov12n.pt` (YOLOv12 nano).
* Launches a test DroidCam video stream in a pop-up window.
* Prints instructions for running `person_detection.py`.

---

## üßç‚Äç‚ôÇÔ∏è Run Person Detection

Ensure `person_detection.py` is located in:

```bash
~/workspace/hkn/CS671-HACKATHON
```

Then run:

```bash
conda activate flash
cd ~/workspace/hkn/CS671-HACKATHON
python person_detection.py
```

### üéØ Expected Behavior

* A live webcam feed will appear.
* People are detected with **green bounding boxes**.
* The **number of people** is shown on the screen.

---

## üõ†Ô∏è Troubleshooting

### üîí "Secure Boot not disabled"

* Reboot your system.
* Enter BIOS/UEFI settings.
* Disable Secure Boot.
* Alternatively, follow Ubuntu‚Äôs guide on [Secure Boot Module Signing](https://ubuntu.com/security/kernel-signing) if disabling isn't an option.

### üì± "DroidCam test failed"

* Run `adb devices` to verify your phone is detected.
* Ensure **USB debugging is enabled**:

  * Go to Phone Settings ‚Üí About Phone ‚Üí Tap **Build Number** 7 times.
  * Enable **Developer Options ‚Üí USB Debugging**.
* If multiple devices are connected:

  ```bash
  adb devices
  export ANDROID_SERIAL=<your_device_id>
  droidcam-cli adb 4747
  ```
* Confirm `v4l2loopback-dc` is loaded:

  ```bash
  lsmod | grep v4l2loopback_dc
  ```

### ‚ùå "Conda not found"

* Install Miniconda:

  ```bash
  wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
  bash Miniconda3-latest-Linux-x86_64.sh
  ```

### üîÑ "Failed to download yolov12n.pt"

* Manually download it from the [Ultralytics GitHub Releases](https://github.com/ultralytics/ultralytics/releases).

### üêç Python dependency errors

If errors occur, recreate the environment:

```bash
conda env remove -n flash
conda create -n flash python=3.11
conda activate flash
conda install opencv=4.9.0 numpy huggingface_hub
pip install ultralytics torchvision==0.20
```

---

## ‚ö†Ô∏è Notes

* **64-bit Only**: DroidCam binaries are 64-bit only. For 32-bit/ARM, you'd need to compile from source (not covered).
* **No Audio**: This setup uses DroidCam **video only** (sound is skipped intentionally).
* **ADB Over USB**: Configuration emphasizes **USB connection** for stability.
* **Secure Boot**: Must be disabled unless you manually sign kernel modules.

---

## üì° Future Add-ons

Once setup is verified, you can extend this with:

* **Crowd heatmap generation**
* **Flow estimation models**
* **Socket.io or WebSocket** for real-time browser dashboard

---

Let me know if you‚Äôd like this in Markdown (`README.md`) format too.
